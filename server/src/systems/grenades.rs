use crate::events::DamageEvent;
use crate::resources::Grenades;
use crate::resources::PlayerStates;
use bevy::prelude::*;
use protocol::constants::GRENADE_BLAST_RADIUS;

/// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä—ã –≥—Ä–∞–Ω–∞—Ç –∏ –Ω–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω –ø—Ä–∏ –≤–∑—Ä—ã–≤–µ
pub fn update_grenades(
    mut grenades: ResMut<Grenades>,
    states: Res<PlayerStates>, // –ü–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–æ–≤
    mut damage_events: EventWriter<DamageEvent>,
    time: Res<Time>,
) {
    let now = time.elapsed_secs_f64();
    let mut to_explode = Vec::new();

    // –°–æ–±–∏—Ä–∞–µ–º –≥—Ä–∞–Ω–∞—Ç—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –∏—Å—Ç—ë–∫ —Ç–∞–π–º–µ—Ä
    for (&id, state) in grenades.0.iter() {
        if now - state.created >= state.ev.timer as f64 {
            to_explode.push(id);
        }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∑—Ä—ã–≤—ã
    for id in to_explode {
        if let Some(gs) = grenades.0.remove(&id) {
            let ev = gs.ev;

            // üî• –†–∞—Å—á—ë—Ç —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –≥—Ä–∞–Ω–∞—Ç—ã
            let lifetime = (now - gs.created) as f32;
            let pos = ev.from + ev.dir * ev.speed * lifetime;

            info!("üí• Grenade {} exploded at {:?}", ev.id, pos);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
            for (&pid, pst) in states.0.iter() {
                let dist = (pst.pos - pos).length();
                let radius = GRENADE_BLAST_RADIUS;

                if dist <= radius {
                    let damage = ((radius - dist) / radius * 50.0) as i32;

                    info!(
                        "üí• ‚Üí Player {} is within radius ({:.1}). Damage = {}",
                        pid, dist, damage
                    );

                    damage_events.write(DamageEvent {
                        target: pid,
                        amount: damage,
                        source: Some(ev.id),
                    });
                }
            }
        }
    }
}
