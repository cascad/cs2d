use crate::events::DamageEvent;
use crate::resources::{GrenadeSyncTimer, Grenades, PlayerStates};
use crate::systems::wall::Wall;
use bevy::prelude::*;
use bevy_quinnet::server::QuinnetServer;
use protocol::constants::{
    CH_S2C, GRENADE_AIR_DRAG_PER_SEC, GRENADE_BLAST_RADIUS, GRENADE_BOUNCE_DAMPING,
    GRENADE_DAMAGE_COEFF, GRENADE_RADIUS, GRENADE_RESTITUTION, GRENADE_STOP_SPEED, MAX_STEP,
    SEPARATION_EPS,
};
use protocol::messages::S2C;

// ---- —É—Ç–∏–ª–∏—Ç—ã –∫–æ–ª–ª–∏–∑–∏–∏ -------------------------------------------------------

#[inline]
fn clamp_vec2(p: Vec2, min: Vec2, max: Vec2) -> Vec2 {
    Vec2::new(p.x.clamp(min.x, max.x), p.y.clamp(min.y, max.y))
}

/// –¢–æ—á–Ω–∞—è –∫–æ–ª–ª–∏–∑–∏—è –∫—Ä—É–≥ (—Ü–µ–Ω—Ç—Ä `c`, —Ä–∞–¥–∏—É—Å `r`) –ø—Ä–æ—Ç–∏–≤ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å—Ç–µ–Ω—ã.
/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (normal, correction), –≥–¥–µ:
/// - normal ‚Äî –Ω–∞—Ä—É–∂–Ω–∞—è –Ω–æ—Ä–º–∞–ª—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞;
/// - correction ‚Äî –≤–µ–∫—Ç–æ—Ä –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ —Ü–µ–Ω—Ç—Ä–∞ –∫—Ä—É–≥–∞, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è.
fn collide_circle_with_wall_precise(
    c: Vec2,
    r: f32,
    wt: &Transform,
    sprite: &Sprite,
) -> Option<(Vec2, Vec2)> {
    let size = sprite.custom_size?;
    let half_w = size / 2.0;
    let rect_center = wt.translation.truncate();
    let min_b = rect_center - half_w;
    let max_b = rect_center + half_w;

    // –ë–ª–∏–∂–∞–π—à–∞—è —Ç–æ—á–∫–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –∫ —Ü–µ–Ω—Ç—Ä—É –∫—Ä—É–≥–∞
    let closest = clamp_vec2(c, min_b, max_b);
    let delta = c - closest;
    let d2 = delta.length_squared();

    if d2 > r * r {
        return None; // –Ω–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
    }

    // –ï—Å—Ç—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ.
    if d2 > 0.0 {
        // –û–±—ã—á–Ω—ã–π —Å–ª—É—á–∞–π: –±–ª–∏–∂–∞–π—à–∞—è —Ç–æ—á–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ/—É–≥–ª—É ‚Üí –Ω–æ—Ä–º–∞–ª—å = –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π delta
        let dist = d2.sqrt();
        let n = delta / dist;
        // —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –≤—ã—Ç–æ–ª–∫–Ω—É—Ç—å –∏–∑ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
        let push = (r - dist) + SEPARATION_EPS;
        return Some((n, n * push));
    }

    // –†–µ–¥–∫–∏–π —Å–ª—É—á–∞–π: —Ü–µ–Ω—Ç—Ä –∫—Ä—É–≥–∞ —É–∂–µ –≤–Ω—É—Ç—Ä–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ (closest == c).
    // –í—ã–±–∏—Ä–∞–µ–º –æ—Å—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ø—Ä–æ–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–µ–º –¥–æ —Å—Ç–æ—Ä–æ–Ω—ã –∏ —Ç–æ–ª–∫–∞–µ–º –ø–æ –Ω–µ–π.
    let pen_left = (c.x - min_b.x).abs();
    let pen_right = (max_b.x - c.x).abs();
    let pen_bottom = (c.y - min_b.y).abs();
    let pen_top = (max_b.y - c.y).abs();

    let (n, push) = {
        let min_x = pen_left.min(pen_right);
        let min_y = pen_bottom.min(pen_top);
        if min_x < min_y {
            if pen_left < pen_right {
                (Vec2::NEG_X, (r + SEPARATION_EPS))
            } else {
                (Vec2::X, (r + SEPARATION_EPS))
            }
        } else {
            if pen_bottom < pen_top {
                (Vec2::NEG_Y, (r + SEPARATION_EPS))
            } else {
                (Vec2::Y, (r + SEPARATION_EPS))
            }
        }
    };
    Some((n, n * push))
}

/// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –≤—Å–µ–º —Å—Ç–µ–Ω–∞–º: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –Ω–æ—Ä–º–∞–ª—å –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏—é
fn collide_circle_with_walls(
    center: Vec2,
    r: f32,
    wall_q: &Query<(&Transform, &Sprite), With<Wall>>,
) -> Option<(Vec2, Vec2)> {
    for (wt, sprite) in wall_q.iter() {
        if let Some(hit) = collide_circle_with_wall_precise(center, r, wt, sprite) {
            return Some(hit);
        }
    }
    None
}

// ---- –æ—Å–Ω–æ–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ -------------------------------------------------------

/// –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞–Ω–∞—Ç—ã: –ø–æ–ª—ë—Ç —Å –æ—Ç—Å–∫–æ–∫–æ–º + –≤–∑—Ä—ã–≤ –ø–æ —Ç–∞–π–º–µ—Ä—É (–±–µ–∑ Rapier)
pub fn update_grenades(
    mut grenades: ResMut<Grenades>,
    states: Res<PlayerStates>,
    mut damage_events: EventWriter<DamageEvent>,
    time: Res<Time>,
    wall_q: Query<(&Transform, &Sprite), With<Wall>>,
    mut server: ResMut<QuinnetServer>,
) {
    let now = time.elapsed_secs_f64();
    let dt = time.delta_secs();

    // --- –ü–æ–ª—ë—Ç + –æ—Ç—Å–∫–æ–∫–∏ ---
    for (&_id, gs) in grenades.0.iter_mut() {
        // –¢–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –≤–∞—à–µ–π —Ñ–æ—Ä–º—É–ª—ã-¬´—è–∫–æ—Ä—è¬ª (–Ω–µ –º–µ–Ω—è–µ–º created)
        let t_since_created = (now - gs.created) as f32;
        let mut pos = gs.ev.from + gs.ev.dir * gs.ev.speed * t_since_created;

        // –ï—Å–ª–∏ –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ —É–∂–µ –≤–Ω—É—Ç—Ä–∏ —Å—Ç–µ–Ω–∫–∏ (–∏–≥—Ä–æ–∫ –≤–ø–ª–æ—Ç–Ω—É—é –∫ —Å—Ç–µ–Ω–µ) ‚Äî –º—è–≥–∫–æ –≤—ã—Ç–æ–ª–∫–Ω–µ–º
        if let Some((_n0, corr0)) = collide_circle_with_walls(pos, GRENADE_RADIUS, &wall_q) {
            pos += corr0;
        }

        // –í–æ–∑–¥—É—à–Ω–æ–µ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ
        gs.ev.speed *= (1.0 - GRENADE_AIR_DRAG_PER_SEC).powf(dt);
        if gs.ev.speed < GRENADE_STOP_SPEED {
            gs.ev.speed = 0.0;
        }

        // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞ —ç—Ç–æ—Ç –∫–∞–¥—Ä
        let mut remaining = gs.ev.dir * gs.ev.speed * dt;

        // –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å–∫–æ—Ä–æ—Å—Ç—å/–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (—á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ–º–∞–Ω—Ç–∏–∫—É —Ç–≤–æ–∏—Ö –ø–æ–ª–µ–π)
        let mut dir = gs.ev.dir;
        let mut speed = gs.ev.speed;

        let mut bounced = false;

        // –ü–æ—à–∞–≥–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
        while remaining.length_squared() > 0.0 {
            let step_len = remaining.length().min(MAX_STEP);
            let step_dir = remaining.normalize_or_zero();
            let step = step_dir * step_len;

            let proposed = pos + step;

            if let Some((normal, corr)) =
                collide_circle_with_walls(proposed, GRENADE_RADIUS, &wall_q)
            {
                // –≤—ã—Ç–∞–ª–∫–∏–≤–∞–µ–º –¥–æ –∫–∞—Å–∞–Ω–∏—è (–±–µ–∑ ¬´–∑–∞–∑–æ—Ä–∞¬ª)
                let contact_pos = proposed + corr;
                pos = contact_pos;

                // –æ—Ç—Ä–∞–∂–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–æ—Ä–º–∞–ª–∏ + –∑–∞—Ç—É—Ö–∞–Ω–∏–µ
                let v = dir * speed;

                let reflected = v - 2.0 * v.dot(normal) * normal;
                let new_speed = reflected.length() * GRENADE_RESTITUTION * GRENADE_BOUNCE_DAMPING;

                let new_dir = if new_speed > 0.0 {
                    reflected / new_speed
                } else {
                    dir
                };

                dir = new_dir;
                speed = if new_speed < GRENADE_STOP_SPEED {
                    0.0
                } else {
                    new_speed
                };

                bounced = true;
                // –ø–æ—Å–ª–µ —É–¥–∞—Ä–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å –≤ —ç—Ç–æ–º –∫–∞–¥—Ä–µ ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ –∏ –±–µ–∑ ¬´–∑–∞–µ–¥–∞–Ω–∏–π¬ª
                break;
            } else {
                pos = proposed;
                remaining -= step;
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ¬´—è–∫–æ—Ä–Ω–æ–π¬ª —Ñ–æ—Ä–º—É–ª—ã, –ù–ï —Ç—Ä–æ–≥–∞—è created (—Ç–∞–π–º–µ—Ä –≤–∑—Ä—ã–≤–∞ –ø—Ä–µ–∂–Ω–∏–π).
        gs.ev.dir = dir;
        gs.ev.speed = speed;
        gs.ev.from = pos - dir * speed * t_since_created;

        // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–∞ –ø—Ä–∏ —Ä–∏–∫–æ—à–µ—Ç–µ (—á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç —Å—Ä–∞–∑—É ¬´—Å—Ö–ª–æ–ø–Ω—É–ª—Å—è¬ª –Ω–∞ –Ω–æ–≤—É—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é)
        if bounced {
            let ep = server.endpoint_mut();
            let vel = dir * speed;
            let _ = ep.broadcast_message_on(
                CH_S2C,
                &S2C::GrenadeSync {
                    id: gs.ev.id,
                    pos,
                    vel,
                    ts: now,
                },
            );
        }
    }

    // --- –í–∑—Ä—ã–≤—ã –ø–æ —Ç–∞–π–º–µ—Ä—É ---
    let mut to_explode = Vec::new();
    for (&id, state) in grenades.0.iter() {
        if now - state.created >= state.ev.timer as f64 {
            to_explode.push(id);
        }
    }

    // --- –ù–∞–Ω–µ—Å–µ–Ω–∏–µ —É—Ä–æ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ ---
    for &id in &to_explode {
        if let Some(gs) = grenades.0.remove(&id) {
            let lifetime = (now - gs.created) as f32;
            let pos = gs.ev.from + gs.ev.dir * gs.ev.speed * lifetime;

            // –°–æ–æ–±—â–∞–µ–º –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º —Ç–æ—á–∫—É –¥–µ—Ç–æ–Ω–∞—Ü–∏–∏
            let ep = server.endpoint_mut();

            let _ = ep.broadcast_message_on(CH_S2C, &S2C::GrenadeDetonated { id: gs.ev.id, pos });

            info!("üí• Grenade {} exploded at {:?}", gs.ev.id, pos);

            for (&pid, pst) in states.0.iter() {
                let dist = (pst.pos - pos).length();
                if dist <= GRENADE_BLAST_RADIUS {
                    let base_damage = ((GRENADE_BLAST_RADIUS - dist) / GRENADE_BLAST_RADIUS * 50.0)
                        * GRENADE_DAMAGE_COEFF;
                    damage_events.write(DamageEvent {
                        target: pid,
                        amount: base_damage as i32,
                        source: Some(gs.ev.id),
                    });
                }
            }
        }
    }
}

// ---- –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–Ω–∞–ø—à–æ—Ç–æ–≤ --------------------------------------

pub fn broadcast_grenade_syncs(
    time: Res<Time>,
    mut sync_t: ResMut<GrenadeSyncTimer>,
    grenades: Res<Grenades>,
    mut server: ResMut<QuinnetServer>,
) {
    if !sync_t.0.tick(time.delta()).just_finished() {
        return;
    }
    let ep = server.endpoint_mut();

    let ts = time.elapsed_secs_f64();
    for (_id, gs) in grenades.0.iter() {
        // –¢–µ–∫—É—â–∞—è —Ç–æ—á–∫–∞ –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑ –≤–∞—à–µ–π ¬´—è–∫–æ—Ä–Ω–æ–π¬ª —Ñ–æ—Ä–º—É–ª—ã
        let t = (ts - gs.created) as f32;
        let pos = gs.ev.from + gs.ev.dir * gs.ev.speed * t;
        let vel = gs.ev.dir * gs.ev.speed; // —É–∂–µ —Å drag/–¥–µ–º–ø—Ñ–æ–º, —Ç.–∫. –≤—ã—à–µ –∏—Ö –æ–±–Ω–æ–≤–ª—è–µ–º

        let _ = ep.broadcast_message_on(
            CH_S2C,
            &S2C::GrenadeSync {
                id: gs.ev.id,
                pos,
                vel,
                ts,
            },
        );
    }
}
