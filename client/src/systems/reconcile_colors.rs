use bevy::prelude::*;

use crate::{
    components::{LocalPlayer, PlayerMarker},
    resources::MyPlayer,
};

pub fn debug_player_colors_on_added(
    q: Query<(&Name, &PlayerMarker, Option<&LocalPlayer>, &Sprite), Added<PlayerMarker>>,
) {
    for (name, marker, is_local, spr) in &q {
        let c = spr.color.to_srgba();
        info!(
            "üé® ADDED {} id={} local={} color=({:.3},{:.3},{:.3},{:.3})",
            name.as_str(), marker.0, is_local.is_some(),
            c.red, c.green, c.blue, c.alpha
        );
    }
}

/// –ü–æ—Å–ª–µ —Å–µ—Ç–µ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç:
/// - LocalPlayer –≤–∏—Å–∏—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å—É—â–Ω–æ—Å—Ç–∏ —Å PlayerMarker(my.id)
/// - —Ü–≤–µ—Ç: —Å–≤–æ–π ‚Äî –∑–µ–ª—ë–Ω—ã–π, —á—É–∂–∏–µ ‚Äî —Å–∏–Ω–∏–µ
pub fn reconcile_local_and_colors(
    my: Res<MyPlayer>,
    mut commands: Commands,
    mut q: Query<(Entity, &PlayerMarker, Option<&LocalPlayer>, &mut Sprite)>,
) {
    if my.id == 0 { return; } // id –µ—â—ë –Ω–µ –ø–æ–ª—É—á–∏–ª–∏

    for (e, marker, has_local, mut spr) in q.iter_mut() {
        if marker.0 == my.id {
            if has_local.is_none() {
                commands.entity(e).insert(LocalPlayer);
                // dbg: info!("attach LocalPlayer -> {}", marker.0);
            }
            // —Å–≤–æ–π = –∑–µ–ª—ë–Ω—ã–π
            let want = Color::srgba(0.0, 1.0, 0.0, 1.0);
            if spr.color != want { spr.color = want; }
        } else {
            if has_local.is_some() {
                commands.entity(e).remove::<LocalPlayer>();
                // dbg: info!("remove LocalPlayer from {}", marker.0);
            }
            // —á—É–∂–æ–π = —Å–∏–Ω–∏–π
            let want = Color::srgba(0.0, 0.0, 1.0, 1.0);
            if spr.color != want { spr.color = want; }
        }
    }
}