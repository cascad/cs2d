use std::str::FromStr;

use crate::components::{Bullet, GrenadeNet, LocalPlayer, PlayerMarker};
use crate::constants::{BULLET_SPEED, BULLET_TTL};
use crate::events::{
    GrenadeDetonatedEvent, GrenadeSpawnEvent, PlayerDamagedEvent, PlayerDied, PlayerLeftEvent,
};
use crate::resources::grenades::{GrenadeStates, NetState};
use crate::resources::{
    ClientLatency, DeadPlayers, HpUiMap, MyPlayer, PendingInputsClient, SnapshotBuffer,
    SpawnedPlayers, TimeSync, UiFont, WallAabbCache,
};
use crate::systems::level::Wall;
use crate::systems::utils::{
    raycast_to_walls, raycast_to_walls_cached, spawn_hp_ui, time_in_seconds,
};
use bevy::prelude::*;
use bevy_quinnet::client::QuinnetClient;
use protocol::constants::{CH_S2C, MOVE_SPEED, PLAYER_SIZE, TICK_DT};
use protocol::messages::{InputState, S2C};

pub fn receive_server_messages(
    mut client: ResMut<QuinnetClient>,
    mut commands: Commands,
    mut buffer: ResMut<SnapshotBuffer>,
    mut time_sync: ResMut<TimeSync>,
    mut my: ResMut<MyPlayer>,
    mut pending: ResMut<PendingInputsClient>,
    mut q_local: Query<&mut Transform, With<LocalPlayer>>,
    mut spawned: ResMut<SpawnedPlayers>,
    mut dead: ResMut<DeadPlayers>,
    // todo fix q and query
    q_marker: Query<(Entity, &PlayerMarker)>,
    mut latency: ResMut<ClientLatency>,
    // mut ev_damage: EventWriter<PlayerDamagedEvent>,
    mut hp_ui_map: ResMut<HpUiMap>,
    // mut ev_player_died: EventWriter<PlayerDied>,
    // mut ev_player_left: EventWriter<PlayerLeftEvent>,
    // mut grenade_spawn_events: EventWriter<GrenadeSpawnEvent>,
    font: Res<UiFont>,
    mut grenade_states: ResMut<GrenadeStates>,
    wall_cache: Res<WallAabbCache>,

    // üîΩ —á–µ—Ç—ã—Ä–µ EventWriter-a —Å–≤–µ—Ä–Ω—É–ª–∏ –≤ –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä
    mut events: ParamSet<(
        EventWriter<PlayerDamagedEvent>,    // p0
        EventWriter<PlayerDied>,            // p1
        EventWriter<PlayerLeftEvent>,       // p2
        EventWriter<GrenadeSpawnEvent>,     // p3
        EventWriter<GrenadeDetonatedEvent>, // p4
    )>,
) {
    let conn = client.connection_mut();

    while let Some((chan, msg)) = conn.try_receive_message::<S2C>() {
        if chan != CH_S2C {
            continue;
        }
        // info!("[Client] ‚Üê got {:?} on channel {}", msg, chan);
        match msg {
            // ===================================================
            // 1) –°–ù–ê–ü–®–û–¢
            // ===================================================
            S2C::Snapshot(snap) => {
                let now_client = time_in_seconds();

                // 1) Time sync ‚Äî –æ–¥–∏–Ω —Ä–∞–∑, –Ω–∞ –ø—É—Å—Ç–æ–º –±—É—Ñ–µ—Ä–µ
                if buffer.snapshots.is_empty() {
                    time_sync.offset = now_client - snap.server_time;
                    info!("[Network] time sync offset = {:.3}", time_sync.offset);
                }

                // 2) Reconciliation –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
                if let Ok(mut t) = q_local.single_mut() {
                    if let Some(ack) = snap.last_input_seq.get(&my.id) {
                        if let Some(ps) = snap.players.iter().find(|p| p.id == my.id) {
                            // —Å–±—Ä–æ—Å –ø–æ–∑—ã –¥–æ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π
                            t.translation = Vec3::new(ps.x, ps.y, t.translation.z);
                            t.rotation = Quat::from_rotation_z(ps.rotation);
                            // —á–∏—Å—Ç–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ –∏–Ω–ø—É—Ç—ã
                            while let Some(front) = pending.0.front() {
                                if front.seq <= *ack {
                                    pending.0.pop_front();
                                } else {
                                    break;
                                }
                            }
                            // re‚Äësimulate –æ—Å—Ç–∞–≤—à–∏–µ—Å—è
                            for inp in pending.0.iter() {
                                simulate_input(&mut *t, inp);
                            }
                        }
                    }
                }

                // 3) –°–ø–∞–≤–Ω–∏–º **–≤—Å–µ—Ö –Ω–æ–≤—ã—Ö** –∏–≥—Ä–æ–∫–æ–≤ –ø—Ä—è–º–æ –∏–∑ —ç—Ç–æ–≥–æ —Å–Ω–∞–ø—à–æ—Ç–∞
                for p in &snap.players {
                    let id = p.id;

                    if dead.0.contains(&id) {
                        // –µ—Å–ª–∏ –ø–æ–º–µ—á–µ–Ω –º—ë—Ä—Ç–≤—ã–º ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                        continue;
                    }

                    if spawned.0.insert(p.id) {
                        let label = String::from_str("snapshot").unwrap();
                        spawn_player(&mut commands, &my, id, p.x, p.y, p.rotation, label);
                    }

                    if !hp_ui_map.0.contains_key(&p.id) {
                        let entity = spawn_hp_ui(&mut commands, p.id, p.hp as u32, font.0.clone());
                        hp_ui_map.0.insert(p.id, entity);
                    }
                }

                // 5) –ö–ª–∞–¥–µ–º –≤ –±—É—Ñ–µ—Ä (–¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏)
                buffer.snapshots.push_back(snap);
                while buffer.snapshots.len() > 120 {
                    buffer.snapshots.pop_front();
                }
            }
            // ===================================================
            // 2) –°–¢–†–ï–õ–¨–ë–ê
            // ===================================================
            // S2C::ShootFx(fx) => {
            //     println!("üí• [Client] got FX from {} at {:?}", fx.shooter_id, fx.from);
            //     if fx.shooter_id != my.id {
            //         commands.spawn((
            //             Sprite {
            //                 color: Color::WHITE,
            //                 custom_size: Some(Vec2::new(12.0, 2.0)),
            //                 ..default()
            //             },
            //             Transform::from_translation(fx.from.extend(10.0))
            //                 .with_rotation(Quat::from_rotation_z(fx.dir.y.atan2(fx.dir.x))),
            //             GlobalTransform::default(),
            //             Bullet {
            //                 ttl: BULLET_TTL,
            //                 vel: fx.dir * BULLET_SPEED,
            //             },
            //         ));
            //     }
            // }
            S2C::ShootFx(fx) => {
                // —Ä–∏—Å—É–µ–º —Ç–æ–ª—å–∫–æ —á—É–∂–∏–µ —Ç—Ä–∞—Å—Å–µ—Ä—ã
                // if fx.shooter_id != my.id {
                // –º–∞–∫—Å. –¥–∞–ª—å–Ω–æ—Å—Ç—å = —Å–∫–æ—Ä–æ—Å—Ç—å * ttl
                let max_dist = BULLET_SPEED * BULLET_TTL;
                let dir = fx.dir.normalize_or_zero();

                // —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ø–µ—Ä–≤–æ–π —Å—Ç–µ–Ω—ã; –±–µ—Ä—ë–º –∏–∑ –∫—ç—à–∞ AABB
                let hit_dist = raycast_to_walls_cached(fx.from, dir, max_dist, &wall_cache.0);

                // –µ—Å–ª–∏ —Å—Ç–µ–Ω–∞ –ø—Ä—è–º–æ —É –¥—É–ª–∞ ‚Äî –Ω–µ —Å–ø–∞–≤–Ω–∏–º –ø—É–ª—é
                if hit_dist <= 0.5 {
                    // info!("üî´ tracer blocked immediately");
                } else {
                    // –æ–±—Ä–µ–∑–∞–µ–º —Ç—Ä–∞—Å—Å–µ—Ä –ø–æ —Å—Ç–µ–Ω–µ: ttl = dist / speed
                    let ttl = hit_dist / BULLET_SPEED;

                    commands.spawn((
                        Sprite {
                            color: Color::WHITE,
                            custom_size: Some(Vec2::new(12.0, 2.0)),
                            ..default()
                        },
                        Transform::from_translation(fx.from.extend(10.0))
                            .with_rotation(Quat::from_rotation_z(dir.y.atan2(dir.x))),
                        GlobalTransform::default(),
                        Bullet {
                            ttl,
                            vel: dir * BULLET_SPEED,
                        },
                    ));
                }
                // }
            }
            // ===================================================
            // 2) –°–ü–ê–í–ù –ò–ì–†–û–ö–ê (–Ω–æ–≤—ã–π –∏–ª–∏ —Ä–µ—Å–ø–∞–≤–Ω)
            // ===================================================
            S2C::PlayerConnected { id, x, y } | S2C::PlayerRespawn { id, x, y } => {
                dead.0.remove(&id);

                // —Å–±—Ä–æ—Å –±—É—Ñ–µ—Ä–∞ —Å–Ω–∞–ø—à–æ—Ç–æ–≤ ‚Üí —Å—Ä–∞–∑—É —Ç–µ–ª–µ–ø–æ—Ä—Ç, –±–µ–∑ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
                buffer.snapshots.clear();

                // 1) –ï—Å–ª–∏ —ç—Ç–æ—Ç id —É–∂–µ –µ—Å—Ç—å ‚Äî –¥–µ—Å–ø–∞–≤–Ω–∏–º —Å—Ç–∞—Ä—É—é —Å—É—â–Ω–æ—Å—Ç—å
                if spawned.0.remove(&id) {
                    for (ent, marker) in q_marker.iter() {
                        if marker.0 == id {
                            commands.entity(ent).despawn();
                            break;
                        }
                    }
                }

                // spawn_hp_ui(&mut commands, id, 100, font.0.clone());

                let label = String::from_str("new/respawn").unwrap();
                spawn_player(&mut commands, &my, id, x, y, 0.0, label);

                spawned.0.insert(id);
            }
            // ===================================================
            // 2) –ò–ì–†–û–ö –í–´–®–ï–õ
            // ===================================================
            S2C::PlayerLeft(left_id) => {
                dead.0.remove(&left_id);

                if let Some((entity, _)) = q_marker.iter().find(|(_, marker)| marker.0 == left_id) {
                    // 1) —Å—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º —Å—É—â–Ω–æ—Å—Ç—å
                    commands.entity(entity).despawn();
                    spawned.0.remove(&left_id);
                    info!("üîå PlayerLeft: –∏–≥—Ä–æ–∫ {} –≤—ã—à–µ–ª ‚Äî despawn", left_id);
                }

                events.p2().write(PlayerLeftEvent(left_id));
            }
            // ===================================================
            // 2) –ò–ì–†–û–ö –í–´–®–ï–õ 2 (event disconnect)
            // ===================================================
            S2C::PlayerDisconnected { id } => {
                dead.0.remove(&id);

                if let Some((entity, _)) = q_marker.iter().find(|(_, marker)| marker.0 == id) {
                    // 1) —Å—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º —Å—É—â–Ω–æ—Å—Ç—å
                    commands.entity(entity).despawn();
                    spawned.0.remove(&id);
                    info!("üîå PlayerLeft: –∏–≥—Ä–æ–∫ {} –≤—ã—à–µ–ª ‚Äî despawn", id);
                }

                events.p2().write(PlayerLeftEvent(id));
            }
            // ===================================================
            // 2) PONG
            // ===================================================
            S2C::Pong {
                client_time,
                server_time,
            } => {
                let now = time_in_seconds();
                let rtt = now - client_time;
                let one_way = (rtt - (now - server_time)) * 0.5;
                latency.rtt = rtt;
                latency.offset = server_time - (client_time + one_way);
                // todo revert
                // info!("üíì Pong: RTT={:.3}s, offset={:.3}s", rtt, latency.offset);
            }
            // ===================================================
            // 2) –£–†–û–ù –ù–ê–ù–ï–°–ï–ù
            // ===================================================
            S2C::PlayerDamaged { id, new_hp, damage } => {
                // println!("–ò–≥—Ä–æ–∫ {id} –ø–æ–ª—É—á–∏–ª {damage} —É—Ä–æ–Ω–∞, –æ—Å—Ç–∞–ª–æ—Å—å {new_hp} HP");
                events.p0().write(PlayerDamagedEvent { id, new_hp, damage });
            }
            // ===================================================
            // –°–ø–∞–≤–Ω –≥—Ä–∞–Ω–∞—Ç—ã
            // ===================================================
            S2C::GrenadeSpawn(ev) => {
                let printable_ev = ev.clone();
                events.p3().write(GrenadeSpawnEvent(ev));

                info!("üí£ GrenadeSpawn {}", printable_ev.id);
            }
            // ===================================================
            // –°–Ω–∞–ø—à–æ—Ç –≥—Ä–∞–Ω–∞—Ç—ã (–ø–æ–∑–∏—Ü–∏—è/—Å–∫–æ—Ä–æ—Å—Ç—å)
            // ===================================================
            S2C::GrenadeSync { id, pos, vel, ts } => {
                info!("SYNC GRENADES: {:?}", pos);
                let e = grenade_states.0.entry(id).or_default();
                *e = NetState {
                    pos,
                    vel,
                    ts,
                    has: true,
                };
            }
            // ===================================================
            // 2) –í–∑—Ä—ã–≤ –≥—Ä–∞–Ω–∞—Ç—ã
            // ===================================================
            S2C::GrenadeDetonated { id, pos } => {
                events.p4().write(GrenadeDetonatedEvent { id, pos });
            }
            // ===================================================
            // 2) –°–ú–ï–†–¢–¨
            // ===================================================
            S2C::PlayerDied { victim, killer } => {
                info!("[Client]   PlayerDied victim={}", victim);

                // –ø–æ–º–µ—á–∞–µ–º —É–±–∏—Ç–æ–≥–æ ¬´–º–µ—Ä—Ç–≤—ã–º¬ª
                dead.0.insert(victim);

                // –µ—Å–ª–∏ —ç—Ç–æ –º—ã ‚Äî despawn —Å–≤–æ–µ–≥–æ —Å–ø—Ä–∞–π—Ç–∞
                if victim == my.id {
                    for (ent, _) in q_marker.iter().filter(|(_, m)| m.0 == victim) {
                        commands.entity(ent).despawn();
                        spawned.0.remove(&victim);
                    }
                    // 2) —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Å–Ω–∞–ø—à–æ—Ç—ã, —á—Ç–æ–±—ã –Ω–µ –≤–æ—Å–∫—Ä–µ—à–∞—Ç—å
                    buffer.snapshots.clear();
                    // –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å UI‚Äë—Ñ—Ä–∞–∑—É –∏–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç ¬´–≤—ã —É–º–µ—Ä–ª–∏¬ª
                }
                // –µ—Å–ª–∏ —ç—Ç–æ –∫—Ç–æ‚Äë—Ç–æ –¥—Ä—É–≥–æ–π ‚Äî despawn –µ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç
                else if let Some((ent, _)) = q_marker.iter().find(|(_, m)| m.0 == victim) {
                    commands.entity(ent).despawn();
                    spawned.0.remove(&victim);
                }

                events.p1().write(PlayerDied {
                    victim: victim,
                    killer: killer,
                });

                info!("üíÄ –ò–≥—Ä–æ–∫ {} –ø–æ–≥–∏–± ({:?})", victim, killer);
            }
        }
    }
}

fn simulate_input(t: &mut Transform, inp: &InputState) {
    let mut dir = Vec2::ZERO;
    if inp.up {
        dir.y += 1.0;
    }
    if inp.down {
        dir.y -= 1.0;
    }
    if inp.left {
        dir.x -= 1.0;
    }
    if inp.right {
        dir.x += 1.0;
    }
    dir = dir.normalize_or_zero();
    t.translation += (dir * MOVE_SPEED * TICK_DT).extend(0.0);
    t.rotation = Quat::from_rotation_z(inp.rotation);
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞.
fn spawn_player(
    commands: &mut Commands,
    me: &ResMut<MyPlayer>,
    id: u64,
    x: f32,
    y: f32,
    rot: f32,
    from: String,
) {
    let tf = Transform::from_xyz(x, y, 0.0).with_rotation(Quat::from_rotation_z(rot));
    if id == me.id {
        // –ª–æ–∫–∞–ª—å–Ω—ã–π (–∑–µ–ª—ë–Ω—ã–π)
        commands.spawn((
            Sprite {
                color: Color::srgb(0.0, 1.0, 0.0),
                custom_size: Some(Vec2::splat(PLAYER_SIZE)),
                ..default()
            },
            tf,
            GlobalTransform::default(),
            PlayerMarker(id),
            LocalPlayer,
        ));

        info!("[Client]{from} spawn LOCAL {}", id);
    } else {
        // —á—É–∂–æ–π (—Å–∏–Ω–∏–π)
        commands.spawn((
            Sprite {
                color: Color::srgb(0.2, 0.4, 1.0),
                custom_size: Some(Vec2::splat(PLAYER_SIZE)),
                ..default()
            },
            tf,
            GlobalTransform::default(),
            PlayerMarker(id),
        ));
        info!("[Client][{from}] spawn REMOTE {}", id);
    }
}

/// –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–µ—Ç–µ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫ Transform –≥—Ä–∞–Ω–∞—Ç.
/// –ú–µ–∂–¥—É —Å–Ω–∞–ø—à–æ—Ç–∞–º–∏ ‚Äî –ª—ë–≥–∫–∞—è —ç–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏—è pos += vel * (now - ts)
pub fn apply_grenade_net(
    states: Res<GrenadeStates>,
    time_sync: Res<TimeSync>,
    mut q: Query<(&GrenadeNet, &mut Transform)>,
) {
    let now_server = time_in_seconds() - time_sync.offset; // —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ —Å–µ–∫—É–Ω–¥—ã
    for (net, mut tf) in q.iter_mut() {
        info!("apply id={} pos={:?}", net.id, tf.translation.truncate());

        if let Some(s) = states.0.get(&net.id) {
            if !s.has {
                continue;
            }
            let mut dt = (now_server - s.ts) as f32;
            if !time_sync.offset.is_finite() {
                dt = 0.0;
            } // –¥–æ –ø–µ—Ä–≤–æ–≥–æ Snapshot
            dt = dt.clamp(0.0, 0.25); // –∞–Ω—Ç–∏-—Å–∫–∞—á–æ–∫
            let pos = s.pos + s.vel * dt;
            tf.translation.x = pos.x;
            tf.translation.y = pos.y;
        }
    }
}
