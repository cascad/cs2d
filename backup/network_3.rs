use crate::components::{Bullet, GrenadeMarker, GrenadeTimer, LocalPlayer, PlayerMarker};
use crate::resources::{
    ClientLatency, InitialSpawnDone, MyPlayer, PendingInputsClient, SnapshotBuffer, SpawnedPlayers,
    TimeSync,
};
use crate::systems::utils::time_in_seconds;
use bevy::prelude::*;
use bevy_quinnet::client::QuinnetClient;
use protocol::constants::{CH_S2C, MOVE_SPEED, TICK_DT};
use protocol::messages::{InputState, S2C};

pub fn receive_server_messages(
    mut client: ResMut<QuinnetClient>,
    mut commands: Commands,
    mut buffer: ResMut<SnapshotBuffer>,
    mut time_sync: ResMut<TimeSync>,
    my: Res<MyPlayer>,
    mut pending: ResMut<PendingInputsClient>,
    mut q: Query<&mut Transform, With<LocalPlayer>>,
    mut spawned: ResMut<SpawnedPlayers>,
    // todo fix q and query
    query: Query<(Entity, &PlayerMarker)>,
    mut latency: ResMut<ClientLatency>,
    mut init_done: ResMut<InitialSpawnDone>,
) {
    let conn = client.connection_mut();
    while let Some((chan, msg)) = conn.try_receive_message::<S2C>() {
        if chan != CH_S2C {
            continue;
        }
        // info!("[Client] ‚Üê got {:?} on channel {}", msg, chan);
        match msg {
            // ===================================================
            // 1) –°–ù–ê–ü–®–û–¢
            // ===================================================
            S2C::Snapshot(snap) => {
                // Time sync
                if buffer.snapshots.is_empty() {
                    time_sync.offset = time_in_seconds() - snap.server_time;
                }
                // Reconciliation
                if let Ok(mut t) = q.single_mut() {
                    if let Some(ack) = snap.last_input_seq.get(&my.id) {
                        if let Some(ps) = snap.players.iter().find(|p| p.id == my.id) {
                            t.translation = Vec3::new(ps.x, ps.y, t.translation.z);
                            t.rotation = Quat::from_rotation_z(ps.rotation);
                            while let Some(front) = pending.0.front() {
                                if front.seq <= *ack {
                                    pending.0.pop_front();
                                } else {
                                    break;
                                }
                            }
                            for inp in pending.0.iter() {
                                simulate_input(&mut *t, inp);
                            }
                        }
                    }
                }

                // info!("[Network] checking initial spawn‚Ä¶");
                // –µ–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—ç–∫–æ—Ñ–∏–ª: —Å–ø–∞–≤–Ω–∏–º –≤—Å–µ—Ö, –≤–∫–ª—é—á–∞—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ
                if !init_done.0 && my.got {
                    info!(
                        "[Network] ‚Üí Performing initial back‚Äëfill of {} players",
                        snap.players.len()
                    );

                    let mut spawned_any = false; // ‚Üê –Ω–æ–≤—ã–π —Ñ–ª–∞–∂–æ–∫

                    for p in &snap.players {
                        // –æ—Ç–º–µ—Ç–∏–º, —á—Ç–æ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –º—ã —É–∂–µ —Å–ø–∞–≤–Ω–∏–ª–∏
                        if spawned.0.insert(p.id) {
                            spawned_any = true; // ‚Üê –æ—Ç–º–µ—Ç–∏–ª–∏, —á—Ç–æ —Ö–æ—Ç—å –æ–¥–∏–Ω –∏–≥—Ä–æ–∫ –ø–æ—è–≤–∏–ª—Å—è

                            let tf = Transform::from_xyz(p.x, p.y, 0.0)
                                .with_rotation(Quat::from_rotation_z(p.rotation));
                            // –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∞–∫—Ç —Å–ø–∞–≤–Ω–∞
                            info!(
                                "[Network]   Spawning player {} at ({:.1},{:.1})",
                                p.id, p.x, p.y
                            );

                            // —Å–æ–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–π bundle
                            if p.id == my.id {
                                // –ª–æ–∫–∞–ª—å–Ω—ã–π
                                commands.spawn((
                                    Sprite {
                                        color: Color::srgb(0.0, 1.0, 0.0),
                                        custom_size: Some(Vec2::splat(40.0)),
                                        ..default()
                                    },
                                    tf,
                                    GlobalTransform::default(),
                                    PlayerMarker(p.id),
                                    LocalPlayer,
                                ));
                            } else {
                                // —á—É–∂–æ–π
                                commands.spawn((
                                    Sprite {
                                        color: Color::srgb(0.2, 0.4, 1.0),
                                        custom_size: Some(Vec2::splat(40.0)),
                                        ..default()
                                    },
                                    tf,
                                    GlobalTransform::default(),
                                    PlayerMarker(p.id),
                                ));
                            };

                            info!("[InitBackfill] Spawned {} at ({:.1},{:.1})", p.id, p.x, p.y);
                        } else {
                            info!("[Network]   Already spawned player {}", p.id);
                        }
                    }
                    // –§–ª–∞–≥ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –í–ù–ï —Ü–∏–∫–ª–∞:
                    if spawned_any {
                        info!("[Network] initial back‚Äëfill finished");
                        init_done.0 = true;
                    } else {
                        info!("[Network] snapshot –ø—É—Å—Ç–æ–π, –∂–¥—ë–º —Å–ª–µ–¥—É—é—â–∏–π");
                    }
                }

                // Buffer for interpolation
                buffer.snapshots.push_back(snap);
                while buffer.snapshots.len() > 120 {
                    buffer.snapshots.pop_front();
                }
            }
            // ===================================================
            // 2) –°–¢–†–ï–õ–¨–ë–ê
            // ===================================================
            S2C::ShootFx(fx) => {
                println!("üí• [Client] got FX from {} at {:?}", fx.shooter_id, fx.from);
                if fx.shooter_id != my.id {
                    commands.spawn((
                        Sprite {
                            color: Color::WHITE,
                            custom_size: Some(Vec2::new(12.0, 2.0)),
                            ..default()
                        },
                        Transform::from_translation(fx.from.extend(10.0))
                            .with_rotation(Quat::from_rotation_z(fx.dir.y.atan2(fx.dir.x))),
                        GlobalTransform::default(),
                        Bullet {
                            ttl: 0.35,
                            vel: fx.dir * 900.0,
                        },
                    ));
                }
            }
            // ===================================================
            // 2) –ò–ì–†–û–ö –í–´–®–ï–õ
            // ===================================================
            S2C::PlayerLeft(left_id) => {
                if let Some((entity, _)) = query.iter().find(|(_, marker)| marker.0 == left_id) {
                    // 1) —Å—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º —Å—É—â–Ω–æ—Å—Ç—å
                    commands.entity(entity).despawn();
                    spawned.0.remove(&left_id);
                    info!("üîå PlayerLeft: –∏–≥—Ä–æ–∫ {} –≤—ã—à–µ–ª ‚Äî despawn", left_id);

                    // 2) —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Å–Ω–∞–ø—à–æ—Ç—ã, —á—Ç–æ–±—ã –Ω–µ –≤–æ—Å–∫—Ä–µ—à–∞—Ç—å
                    buffer.snapshots.clear();
                }
            }
            // ===================================================
            // 2) PONG
            // ===================================================
            S2C::Pong {
                client_time,
                server_time,
            } => {
                let now = time_in_seconds();
                let rtt = now - client_time;
                let one_way = (rtt - (now - server_time)) * 0.5;
                latency.rtt = rtt;
                latency.offset = server_time - (client_time + one_way);
                // todo revert
                // info!("üíì Pong: RTT={:.3}s, offset={:.3}s", rtt, latency.offset);
            }
            // ===================================================
            // 2) –°–ø–∞–≤–Ω –≥—Ä–∞–Ω–∞—Ç—ã
            // ===================================================
            S2C::GrenadeSpawn(ev) => {
                commands.spawn((
                    GrenadeMarker(ev.id),
                    Sprite {
                        color: Color::WHITE,
                        custom_size: Some(Vec2::new(12.0, 2.0)),
                        ..default()
                    },
                    Transform::from_translation(ev.from.extend(10.0))
                        .with_rotation(Quat::from_rotation_z(ev.dir.y.atan2(ev.dir.x))),
                    GlobalTransform::default(),
                    GrenadeTimer(Timer::from_seconds(ev.timer, TimerMode::Once)),
                ));
                info!("üí£ GrenadeSpawn {}", ev.id);
            }
            // ===================================================
            // 2) –°–ú–ï–†–¢–¨
            // ===================================================
            S2C::PlayerDied { victim, killer } => {
                info!("[Client]   PlayerDied victim={}", victim);
                // –µ—Å–ª–∏ —ç—Ç–æ –º—ã ‚Äî despawn —Å–≤–æ–µ–≥–æ —Å–ø—Ä–∞–π—Ç–∞
                if victim == my.id {
                    for (ent, _) in query.iter().filter(|(_, m)| m.0 == victim) {
                        commands.entity(ent).despawn();
                        spawned.0.remove(&victim);
                    }
                    // –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å UI‚Äë—Ñ—Ä–∞–∑—É –∏–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç ¬´–≤—ã —É–º–µ—Ä–ª–∏¬ª
                }
                // –µ—Å–ª–∏ —ç—Ç–æ –∫—Ç–æ‚Äë—Ç–æ –¥—Ä—É–≥–æ–π ‚Äî despawn –µ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç
                else if let Some((ent, _)) = query.iter().find(|(_, m)| m.0 == victim) {
                    commands.entity(ent).despawn();
                    spawned.0.remove(&victim);
                }
                // 2) —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Å–Ω–∞–ø—à–æ—Ç—ã, —á—Ç–æ–±—ã –Ω–µ –≤–æ—Å–∫—Ä–µ—à–∞—Ç—å
                buffer.snapshots.clear();

                info!("üíÄ –ò–≥—Ä–æ–∫ {} –ø–æ–≥–∏–± ({:?})", victim, killer);
            }
            // ===================================================
            // 3) –†–ï–°–ü–ê–£–ù
            // ===================================================
            S2C::PlayerRespawn { id, x, y } => {
                info!("[Client]   PlayerRespawn id={} at ({},{})", id, x, y);
                // —Ä–µ—Å–ø–∞–≤–Ω–∏–º—Å—è –∏–º–µ–Ω–Ω–æ –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Ç–æ—á–∫–µ
                let tf = Transform::from_xyz(x, y, 0.0);
                if id == my.id {
                    // —Å–ø–∞–≤–Ω–∏–º –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ
                    commands.spawn((
                        Sprite {
                            color: Color::srgb(0.0, 1.0, 0.0),
                            custom_size: Some(Vec2::splat(40.0)),
                            ..default()
                        },
                        tf,
                        GlobalTransform::default(),
                        PlayerMarker(id),
                        LocalPlayer,
                    ));
                    info!("üîÑ –Ø ({}) —Ä–µ—Å–ø–∞–≤–Ω–∏–ª—Å—è", id);
                } else if spawned.0.insert(id) {
                    // —Å–ø–∞–≤–Ω–∏–º —á—É–∂–æ–≥–æ
                    commands.spawn((
                        Sprite {
                            color: Color::srgb(0.2, 0.4, 1.0),
                            custom_size: Some(Vec2::splat(40.0)),
                            ..default()
                        },
                        tf,
                        GlobalTransform::default(),
                        PlayerMarker(id),
                    ));
                    info!("üîÑ –ò–≥—Ä–æ–∫ {} —Ä–µ—Å–ø–∞–≤–Ω–∏–ª—Å—è", id);
                }
            }
        }
    }
}

fn simulate_input(t: &mut Transform, inp: &InputState) {
    let mut dir = Vec2::ZERO;
    if inp.up {
        dir.y += 1.0;
    }
    if inp.down {
        dir.y -= 1.0;
    }
    if inp.left {
        dir.x -= 1.0;
    }
    if inp.right {
        dir.x += 1.0;
    }
    dir = dir.normalize_or_zero();
    t.translation += (dir * MOVE_SPEED * TICK_DT).extend(0.0);
    t.rotation = Quat::from_rotation_z(inp.rotation);
}
