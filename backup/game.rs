use bevy::prelude::*;
use serde::{Deserialize, Serialize};
use bevy::sprite::Sprite;

/// –°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ –ø–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –¥–ª—è broadcast
#[derive(Serialize, Deserialize, Clone, Debug, Event)]
pub struct CommandEvent {
    pub position: Vec2,
}

pub struct SimpleGamePlugin;

impl Plugin for SimpleGamePlugin {
    fn build(&self, app: &mut App) {
        app.add_event::<CommandEvent>()
            .add_systems(Startup, setup_camera)
            .add_systems(Update, (detect_click_and_send, draw_on_click));
    }
}

/// –ö–∞–º–µ—Ä–∞ –¥–ª—è 2D-—Å—Ü–µ–Ω—ã
fn setup_camera(mut commands: Commands) {
    commands.spawn(Camera2d::default());
}

/// –õ–æ–∫–∞–ª—å–Ω–æ –¥–µ—Ç–µ–∫—Ç–∏–º –∫–ª–∏–∫ –∏ —Å–æ–∑–¥–∞—ë–º —Å–æ–±—ã—Ç–∏–µ (–ø–æ—Ç–æ–º —É–π–¥—ë—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä)
fn detect_click_and_send(
    mouse: Res<ButtonInput<MouseButton>>,
    windows: Query<&Window>,
    mut ev_writer: EventWriter<CommandEvent>,
) {
    if mouse.just_pressed(MouseButton::Left) {
        if let Ok(win) = windows.single() {
            if let Some(cursor) = win.cursor_position() {
                // –ü–µ—Ä–µ–≤–æ–¥–∏–º —ç–∫—Ä–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –º–∏—Ä–æ–≤—ã–µ (—Å —Ü–µ–Ω—Ç—Ä–æ–º –≤ 0,0)
                let pos = Vec2::new(cursor.x - win.width() / 2., win.height() / 2. - cursor.y);
                println!("üñ± Click at: {:?}", pos);
                ev_writer.write(CommandEvent { position: pos });
            }
        }
    }
}

/// –†–∏—Å—É–µ–º –∫–≤–∞–¥—Ä–∞—Ç–∏–∫ –≤ –ø–æ–∑–∏—Ü–∏–∏ –∫–ª–∏–∫–∞ (–∫–æ–≥–¥–∞ –ø—Ä–∏—à–ª–æ —Å–æ–±—ã—Ç–∏–µ ‚Äî –ª–æ–∫–∞–ª—å–Ω–æ–µ –∏–ª–∏ –∏–∑ —Å–µ—Ç–∏)
fn draw_on_click(mut commands: Commands, mut ev_reader: EventReader<CommandEvent>) {
    for ev in ev_reader.read() {
        commands.spawn((
            Sprite {
                color: Color::srgb(0.3, 0.8, 0.3),
                custom_size: Some(Vec2::splat(40.0)),
                ..default()
            },
            Transform::from_translation(ev.position.extend(0.0)),
        ));
    }
}